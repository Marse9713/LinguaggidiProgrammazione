esercizio 5 lex

/*stampa a monitor gli elementi che sono all'interno del file se sono multipli di 4, compreso lo 0*/
%{
    #include <stdio.h>
%}

%%

[048]|\d*([02468][048]|[13579][26])     {printf("%d ", atoi (yytext));}
.                                       {}
%%

int main (){

    extern FILE *yyin;
 
    yyin = fopen("Input.txt", "r");

    yylex();
    return 0;

}

-----------------------------------------------------------------------------------------------------------

esercizio 8 lex


%{
   #include <stdio.h>
   #include <stdlib.h>
%}

%%
(\+|-)[0-9]+			{ printf("%d è un decimale\n", atoi(yytext) ); }
[0-9a-fA-F]+[hH]	 	{ printf(" 0x%0lX è un esadecimale\n", strtol(yytext, NULL, 16) ); }
[0][x][0-9a-fA-F]+		{ printf(" 0x%0lX è un esadecimale\n", strtol(yytext, NULL, 16) ); }
[o|O][0-7]+				{ printf("%ld è un ottale\n", strtol(yytext, NULL, 8) ); }
[0-7]+[O]				{ printf("%ld è un ottale\n", strtol(yytext, NULL, 8) ); }
%%

main(int argc, const char *aArgv[])
{
   yylex();
   return 0;
}

int yywrap()
{
   return(1);
}

-----------------------------------------------------------------------------------------------------------

esercizio 5 lex-yacc

5.l


%{ 
	#include "5.tab.h"
	#include <string.h> 

	struct Tree;
	typedef struct Tree Tree;
%}
 
%%

[0-9]+   				{yylval.txt = strdup(yytext); return NUMERO;}
"if"					{yylval.txt = strdup(yytext); return IF;}
"else"					{yylval.txt = strdup(yytext); return ELSE;}
"while"					{yylval.txt = strdup(yytext); return WHILE;}
[a-z]+[a-zA-z0-9]*		{yylval.txt = strdup(yytext); return IDENT;}
"="					    {yylval.txt = strdup(yytext); return ASSEGN;}
"+="					{yylval.txt = strdup(yytext); return INCREM;}
";"						{yylval.txt = strdup(yytext); return SEPARATORE;}
"("						{yylval.txt = strdup(yytext); return '(';}
")"						{yylval.txt = strdup(yytext); return ')';}
"{"						{yylval.txt = strdup(yytext); return '{';}
"}"						{yylval.txt = strdup(yytext); return '}';}

.  			     		;

%%

int yywrap (void)  
{
	return 1;
}



-------------

5.y


%{ 
	#include <stdio.h> 
	#include <string.h>
	#include <stdlib.h>
	#define ARITY 6

	void yyerror (char *s);
	int yylex();
	
	struct Tree;
	typedef struct Tree Tree;
	struct Tree {
		char* top;
		Tree* subTrees[ARITY];
	};

	Tree* makeTree (char* top, Tree* t1, Tree* t2, Tree* t3, Tree* t4, Tree* t5, Tree* t6) {
		Tree* res = (Tree*) malloc(sizeof(Tree));
		res->top = top;
		res->subTrees[0] = t1;
		res->subTrees[1] = t2;
		res->subTrees[2] = t3;
		res->subTrees[3] = t4;
		res->subTrees[4] = t5;
		res->subTrees[5] = t6;

		return res;
	}

	void printTree (Tree* t, int sp) {
		printf("%*s%s\n", sp, "", t->top);
		for (int i = 0; i < ARITY; i++) {
			if (!t->subTrees[i]) continue;
			printTree(t->subTrees[i], sp + 1);
		}
	}
%} 

%union 		{char* txt; struct Tree* tp;}

%start		input
%token     	IDENT 
%token     	NUMERO
%token 		ASSEGN
%token	 	INCREM
%token     	IF ELSE
%token	 	WHILE
%token     	'(' ')'
%token	 	'{' '}'
%token	 	SEPARATORE

%type 		<txt> NUMERO IF ELSE WHILE IDENT ASSEGN INCREM '(' ')' '{' '}'  SEPARATORE
%type       <tp> input blocco dichiarazione com elsE rval lval

%nonassoc IF
%nonassoc ELSE

%%

input  : /* epsilon */							{}
	   | blocco  								{printf("\n"); printTree($1, 0); printf("\n");} 					 
	   ;
	   
blocco : dichiarazione                     		{$$ = makeTree("BLOCCO", $1, NULL, NULL, NULL, NULL, NULL);}  
	   | dichiarazione blocco          			{$$ = makeTree("BLOCCO", $1, $2, NULL, NULL, NULL, NULL);}
	   ;  
	   
dichiarazione : com 							{$$ = makeTree("DICHIARAZIONE", $1, NULL, NULL, NULL, NULL, NULL);}
	   		  | '{' blocco '}' 	 				{$$ = makeTree("DICHIARAZIONE", makeTree($1, NULL, NULL, NULL, NULL, NULL, NULL), $2, makeTree($3, NULL, NULL, NULL, NULL, NULL, NULL), NULL, NULL, NULL);}
	   		  ;

com : lval ASSEGN rval SEPARATORE			{$$ = makeTree("COMANDO", $1, makeTree($2, NULL, NULL, NULL, NULL, NULL, NULL), $3, makeTree($4, NULL, NULL, NULL, NULL, NULL, NULL), NULL, NULL);}
	| lval INCREM rval SEPARATORE			{$$ = makeTree("COMANDO", $1, makeTree($2, NULL, NULL, NULL, NULL, NULL, NULL), $3, makeTree($4, NULL, NULL, NULL, NULL, NULL, NULL), NULL, NULL);}
	| WHILE '(' lval ')' dichiarazione		{$$ = makeTree("COMANDO", makeTree($1, NULL, NULL, NULL, NULL, NULL, NULL), makeTree($2, NULL, NULL, NULL, NULL, NULL, NULL), $3, makeTree($4, NULL, NULL, NULL, NULL, NULL, NULL), $5, NULL);}
	| IF '(' lval ')' dichiarazione %prec IF	{$$ = makeTree("COMANDO", makeTree($1, NULL, NULL, NULL, NULL, NULL, NULL), makeTree($2, NULL, NULL, NULL, NULL, NULL, NULL), $3, makeTree($4, NULL, NULL, NULL, NULL, NULL, NULL), $5, NULL);}
	| IF '(' lval ')' dichiarazione elsE		{$$ = makeTree("COMANDO", makeTree($1, NULL, NULL, NULL, NULL, NULL, NULL), makeTree($2, NULL, NULL, NULL, NULL, NULL, NULL), $3, makeTree($4, NULL, NULL, NULL, NULL, NULL, NULL), $5, $6);}
	;

elsE   : ELSE dichiarazione						{$$ = makeTree("ELSE", makeTree($1, NULL, NULL, NULL, NULL, NULL, NULL), $2, NULL, NULL, NULL, NULL);}
	   ;
	   
rval   : lval 									{$$ = makeTree("RVAL", $1, NULL, NULL, NULL, NULL, NULL);}
	   | NUMERO									{$$ = makeTree("RVAL", makeTree($1, NULL, NULL, NULL, NULL, NULL, NULL), NULL, NULL, NULL, NULL, NULL);}
	   ;
	               
lval   : IDENT 									{$$ = makeTree("LVAL", makeTree($1, NULL, NULL, NULL, NULL, NULL, NULL), NULL, NULL, NULL, NULL, NULL);}
	   ;
        
%% 

int main (void) {
	yyparse();
	return 0;
}

void yyerror (char *s) {
	printf("%s\n", s); 
}


-----------------------------------------------------------------------------------------------------------

esercizio 8 lex-yacc

8.l

%{
    #include "8.tab.h"
    #include <string.h>

    struct Tree;
    typedef struct Tree Tree;
%}

%%

"+"                             {yylval.txt = strdup(yytext); return SOMMA;}
"-"                             {yylval.txt = strdup(yytext); return DIFFERENZA;}
"*"                             {yylval.txt = strdup(yytext); return MOLTIPLICAZIONE;}
let                             {yylval.txt = strdup(yytext); return LET;}
case                            {yylval.txt = strdup(yytext); return CASE;}
else                            {yylval.txt = strdup(yytext); return ELSE;}
"("                             {yylval.txt = strdup(yytext); return '(';}
")"                             {yylval.txt = strdup(yytext); return ')';}
"["                             {yylval.txt = strdup(yytext); return '[';}
"]"                             {yylval.txt = strdup(yytext); return ']';}
[0-9]*                          {yylval.txt = strdup(yytext); return NUMERO;}
[a-zA-Z]+[a-zA-Z0-9]*           {yylval.txt = strdup(yytext); return IDENTIFICATORE;}
"="                             {yylval.txt = strdup(yytext); return EQUIVALENZA;}
.                               ;

%%

int yywrap (void){

    return 1;

}

-------------------

8.y


%{ 
	#include <stdio.h> 
	#include <string.h>
	#include <stdlib.h>
	#define ARITY 7

	void yyerror (char *s);
	int yylex();
	
	struct Tree;
	typedef struct Tree Tree;
	struct Tree {
		char* top;
		Tree* subTrees[ARITY];
	};

	Tree* makeTree (char* top, Tree* t1, Tree* t2, Tree* t3, Tree* t4, Tree* t5, Tree* t6, Tree* t7) {
		Tree* res = (Tree*) malloc(sizeof(Tree));
		res->top = top;
		res->subTrees[0] = t1;
		res->subTrees[1] = t2;
		res->subTrees[2] = t3;
		res->subTrees[3] = t4;
		res->subTrees[4] = t5;
		res->subTrees[5] = t6;
		res->subTrees[6] = t7;

		return res;
	}

	void printTree (Tree* t, int sp) {
		printf("%*s%s\n", sp, "", t->top);
		for (int i = 0; i < ARITY - 1; i++) {
			if (!t->subTrees[i]) continue;
			printTree(t->subTrees[i], sp + 3);
		}
	}
%} 

%union 		{char* txt; struct Tree* tp;}

%start		input
%token     	NUMERO
%token     	IDENTIFICATORE
%token      LET
%token     	CASE
%token		ELSE
%token 		MOLTIPLICAZIONE
%token	 	SOMMA
%token	 	DIFFERENZA
%token	 	EQUIVALENZA
%token     	'('
%token	 	')'
%token      '['
%token      ']'

%type 		<txt> NUMERO IDENTIFICATORE SOMMA DIFFERENZA EQUIVALENZA MOLTIPLICAZIONE LET CASE ELSE '(' ')' '[' ']'
%type       <tp> input valore espressione blocco somma differenza moltiplicazione equivalenza valore_multiplo blocco_multiplo case caso casi let corpolet quadre

%%

input :                                     				{} 
    | blocco                            					{printf("\n"); printTree($1, 0); return 0;}
    ;

blocco :  espressione										{$$ = makeTree("BLOCCO", $1, NULL, NULL, NULL, NULL, NULL, NULL);}
	| '(' espressione ')'									{$$ = makeTree("BLOCCO", makeTree($1, NULL, NULL, NULL, NULL, NULL, NULL, NULL), $2, makeTree($3, NULL, NULL, NULL, NULL, NULL, NULL, NULL), NULL, NULL, NULL, NULL);}
	;

espressione : somma				 							{$$ = makeTree("ESPRESSIONE", $1, NULL, NULL, NULL, NULL, NULL, NULL);}
	| differenza			 								{$$ = makeTree("ESPRESSIONE", $1, NULL, NULL, NULL, NULL, NULL, NULL);}
	| moltiplicazione										{$$ = makeTree("ESPRESSIONE", $1, NULL, NULL, NULL, NULL, NULL, NULL);}
	| equivalenza			 								{$$ = makeTree("ESPRESSIONE", $1, NULL, NULL, NULL, NULL, NULL, NULL);}
	| case													{$$ = makeTree("ESPRESSIONE", $1, NULL, NULL, NULL, NULL, NULL, NULL);}
	| let													{$$ = makeTree("ESPRESSIONE", $1, NULL, NULL, NULL, NULL, NULL, NULL);}
	;

somma : SOMMA valore_multiplo								{$$ = makeTree("SOMMA", $2, NULL, NULL, NULL, NULL, NULL, NULL);}
	| SOMMA valore blocco									{$$ = makeTree("SOMMA", $2, $3, NULL, NULL, NULL, NULL, NULL);}
	| SOMMA blocco valore									{$$ = makeTree("SOMMA", $2, $3, NULL, NULL, NULL, NULL, NULL);}
	| SOMMA blocco_multiplo									{$$ = makeTree("SOMMA", $2, NULL, NULL, NULL, NULL, NULL, NULL);}
	;

differenza : DIFFERENZA valore_multiplo						{$$ = makeTree("DIFFERENZA", $2, NULL, NULL, NULL, NULL, NULL, NULL);}
	| DIFFERENZA valore blocco								{$$ = makeTree("DIFFERENZA", $2, $3, NULL, NULL, NULL, NULL, NULL);}
	| DIFFERENZA blocco valore								{$$ = makeTree("DIFFERENZA", $2, $3, NULL, NULL, NULL, NULL, NULL);}
	| DIFFERENZA blocco_multiplo							{$$ = makeTree("DIFFERENZA", $2, NULL, NULL, NULL, NULL, NULL, NULL);}
	;

moltiplicazione : MOLTIPLICAZIONE valore_multiplo			{$$ = makeTree("MOLTIPLICAZIONE", $2, NULL, NULL, NULL, NULL, NULL, NULL);}
	| MOLTIPLICAZIONE valore blocco							{$$ = makeTree("MOLTIPLICAZIONE", $2, $3, NULL, NULL, NULL, NULL, NULL);}
	| MOLTIPLICAZIONE blocco valore							{$$ = makeTree("MOLTIPLICAZIONE", $2, $3, NULL, NULL, NULL, NULL, NULL);}
	| MOLTIPLICAZIONE blocco_multiplo						{$$ = makeTree("MOLTIPLICAZIONE", $2, NULL, NULL, NULL, NULL, NULL, NULL);}
	;

equivalenza : EQUIVALENZA valore_multiplo					{$$ = makeTree("EQUIVALENZA", $2, NULL, NULL, NULL, NULL, NULL, NULL);}
	| EQUIVALENZA valore blocco								{$$ = makeTree("EQUIVALENZA", $2, $3, NULL, NULL, NULL, NULL, NULL);}
	| EQUIVALENZA blocco valore								{$$ = makeTree("EQUIVALENZA", $2, $3, NULL, NULL, NULL, NULL, NULL);}
	| EQUIVALENZA blocco_multiplo							{$$ = makeTree("EQUIVALENZA", $2, NULL, NULL, NULL, NULL, NULL, NULL);}
	;

valore_multiplo : valore									{$$ = $1;}
	| NUMERO valore_multiplo								{$$ = makeTree("NUMERO", $2, NULL, NULL, NULL, NULL, NULL, NULL);}
	| IDENTIFICATORE valore_multiplo						{$$ = makeTree("IDENTIFICATORE", $2, NULL, NULL, NULL, NULL, NULL, NULL);}
	;

blocco_multiplo : blocco									{$$ = makeTree("BLOCCO", $1, NULL, NULL, NULL, NULL, NULL, NULL);}
	| blocco blocco_multiplo								{$$ = makeTree("BLOCCO", $2, NULL, NULL, NULL, NULL, NULL, NULL);}

valore : NUMERO 											{$$ = makeTree("NUMERO", NULL, NULL, NULL, NULL, NULL, NULL, NULL);}
	| IDENTIFICATORE 										{$$ = makeTree("IDENTIFICATORE", NULL, NULL, NULL, NULL, NULL, NULL, NULL);}
	;

case : CASE '(' espressione ')' casi 						{$$ = makeTree("CASE", makeTree($2, NULL, NULL, NULL, NULL, NULL, NULL, NULL), $3, makeTree($4, NULL, NULL, NULL, NULL, NULL, NULL, NULL), $5, NULL, NULL, NULL);}			
	;

caso : '[' ELSE valore ']'									{$$ = makeTree("CASO ELSE", makeTree($1, NULL, NULL, NULL, NULL, NULL, NULL, NULL), $3, makeTree($4, NULL, NULL, NULL, NULL, NULL, NULL, NULL), NULL, NULL, NULL, NULL);}
	| '[' '(' valore_multiplo ')' valore ']'				{$$ = makeTree("CASO", makeTree($1, NULL, NULL, NULL, NULL, NULL, NULL, NULL), makeTree($2, NULL, NULL, NULL, NULL, NULL, NULL, NULL), $3, makeTree($4, NULL, NULL, NULL, NULL, NULL, NULL, NULL), $5, makeTree($6, NULL, NULL, NULL, NULL, NULL, NULL, NULL), NULL);}
	;

casi : caso													{$$ = $1;}
	| caso casi												{$$ = makeTree("BLOCCO CASI", $1, $2, NULL, NULL, NULL, NULL, NULL);}
	;

let : LET '(' quadre ')' corpolet							{$$ = makeTree("LET", makeTree($2, NULL, NULL, NULL, NULL, NULL, NULL, NULL), $3, makeTree($4, NULL, NULL, NULL, NULL, NULL, NULL, NULL), $5, NULL, NULL, NULL);}
	;

corpolet : valore_multiplo									{$$ = $1;}
	| blocco												{$$ = $1;}
	| '(' let ')' corpolet									{$$ = makeTree("LET ANNIDATO", makeTree($1, NULL, NULL, NULL, NULL, NULL, NULL, NULL), $2, makeTree($3, NULL, NULL, NULL, NULL, NULL, NULL, NULL), $4, NULL, NULL, NULL);}
	;

quadre : '[' valore_multiplo ']'							{$$ = makeTree("[", $2, makeTree($3, NULL, NULL, NULL, NULL, NULL, NULL, NULL), NULL, NULL, NULL, NULL, NULL);}
	| '[' valore_multiplo ']' quadre						{$$ = makeTree("[", $2, makeTree($3, NULL, NULL, NULL, NULL, NULL, NULL, NULL), $4, NULL, NULL, NULL, NULL);}
	;

%%   

int main (void) {
	yyparse();
	return 0;
}

void yyerror (char *s) {
	printf("%s\n", s); 
}